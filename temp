try {
    let checker = await fs.promises.stat(req.query.path);
    if (checker.isDirectory()) {
      let result = [];
      try {
        const files = await fs.promises.readdir(req.query.path);
        let pathChecker = req.query.path;
        for (let i = 0; i < files.length; i++) {
          try {
            let filePath;
            if (pathChecker != "/") {
              filePath = `${pathChecker}/${files[i]}`;
            } else {
              filePath = `/${files[i]}`;
            }
            const fileStats = await fs.promises.stat(filePath);
            if (fileStats.isDirectory()) {
              result.push({
                name: files[i],
                isFile: false,
                notAcessible: false,
              });
            } else {
              result.push({
                name: files[i],
                isFile: true,
                notAcessible: false,
              });
            }
          } catch (error) {
            result.push({ name: files[i], isFile: true, notAcessible: true });
          }
        }
        let resultObj = { wholeData: result };
        res.render("files", resultObj);
      } catch (err) {
        console.error("Error reading folder:", err);
        res.status(500).send("Error reading folder");
      }
    } else {
      fs.readFile(req.query.path, (err, data) => {
        if (err) {
          res.status(400).end("error");
        }
        res.send(data);
      });
    }
  } catch (error) {
    res.send(error.message);
  }